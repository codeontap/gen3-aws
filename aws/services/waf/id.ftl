[#ftl]

[#-- Resources --]
[#-- At the moment, the condition resource types are being     --]
[#-- generated by prepending "waf" to the condition type       --]
[#-- If they end up needing custom attributes, then individual --]
[#-- reousrce type definitions will be needed here but for now --]
[#-- AWs hasn't defined any of interest                        --]
[#assign AWS_WAFV2_RULE_RESOURCE_TYPE = "wafv2Rule" ]
[#assign AWS_WAFV2_ACL_RESOURCE_TYPE = "wafv2Acl" ]
[#assign AWS_WAFV2_ACL_ASSOCIATION_RESOURCE_TYPE = "wafv2Assoc" ]
[#assign AWS_WAFV2_IPSET_RESOURCE_TYPE = "wafv2IpSet" ]
[#assign AWS_WAFV2_REGEX_PATTERN_SET_RESOURCE_TYPE = "wafv2RegexPatternSet" ]

[#-- Condition types --]
[#assign AWS_WAF_BYTE_MATCH_CONDITION_TYPE = "ByteMatch" ]
[#assign AWS_WAF_GEO_MATCH_CONDITION_TYPE = "GeoMatch" ]
[#assign AWS_WAF_IP_MATCH_CONDITION_TYPE = "IPMatch" ]
[#assign AWS_WAF_REGEX_MATCH_CONDITION_TYPE = "RegexMatch" ]
[#assign AWS_WAF_SIZE_CONSTRAINT_CONDITION_TYPE = "SizeConstraint" ]
[#assign AWS_WAF_SQL_INJECTION_MATCH_CONDITION_TYPE = "SqlInjectionMatch" ]
[#assign AWS_WAF_XSS_MATCH_CONDITION_TYPE = "XssMatch" ]


[#-- Capture the variability between the various conditions --]
[#function getWAFConditionSetMappings conditionType ]
    [#switch conditionType]
        [#case AWS_WAF_BYTE_MATCH_CONDITION_TYPE]
            [#return
                {
                    "ResourceType" : {},
                    "TuplesAttributeKey" : "ByteMatchTuples"
                }
            ]
            [#break]

        [#case AWS_WAF_GEO_MATCH_CONDITION_TYPE]
            [#return
                {
                    "ResourceType" : {},
                    "TuplesAttributeKey" : "GeoMatchConstraints"
                }
            ]
            [#break]

        [#case AWS_WAF_IP_MATCH_CONDITION_TYPE]
            [#return
                {
                    "ResourceType" : {
                        "hamlet": AWS_WAFV2_IPSET_RESOURCE_TYPE,
                        "cfn": "AWS::WAFv2::IPSet"
                    },
                    "TuplesAttributeKey" : "IPSetDescriptors"
                }
            ]
            [#break]

        [#case AWS_WAF_REGEX_MATCH_CONDITION_TYPE]
            [#return
                {
                    "ResourceType": {
                        "hamlet": AWS_WAFV2_REGEX_PATTERN_SET_RESOURCE_TYPE,
                        "cfn": "AWS::WAFv2::RegexPatternSet"
                    }
                }
            ]
            [#break]


        [#case AWS_WAF_SIZE_CONSTRAINT_CONDITION_TYPE]
            [#return
                {
                    "ResourceType" : {},
                    "TuplesAttributeKey" : "SizeConstraints"
                }
            ]
            [#break]

        [#case AWS_WAF_SQL_INJECTION_MATCH_CONDITION_TYPE]
            [#return
                {
                    "ResourceType" : {},
                    "TuplesAttributeKey" : "SqlInjectionMatchTuples"
                }
            ]
            [#break]

        [#case AWS_WAF_XSS_MATCH_CONDITION_TYPE]
            [#return
                {
                    "ResourceType" : {},
                    "TuplesAttributeKey" : "XssMatchTuples"
                }
            ]
            [#break]
    [/#switch]
[/#function]

[#list [

    AWS_WAFV2_RULE_RESOURCE_TYPE,
    AWS_WAFV2_ACL_RESOURCE_TYPE,
    AWS_WAFV2_ACL_ASSOCIATION_RESOURCE_TYPE,
    AWS_WAFV2_IPSET_RESOURCE_TYPE,
    AWS_WAFV2_REGEX_PATTERN_SET_RESOURCE_TYPE ] as resource]

    [@addServiceResource
        provider=AWS_PROVIDER
        service=AWS_WEB_APPLICATION_FIREWALL_SERVICE
        resource=resource
    /]
[/#list]

[#list [
        AWS_WAFV2_IPSET_RESOURCE_TYPE,
        AWS_WAFV2_REGEX_PATTERN_SET_RESOURCE_TYPE
    ] as wafV2matchSetResourceType ]

    [@addOutputMapping
        provider=AWS_PROVIDER
        resourceType=wafV2matchSetResourceType
        mappings={
            REFERENCE_ATTRIBUTE_TYPE : {
                "UseRef" : true
            },
            ARN_ATTRIBUTE_TYPE : {
                "Attribute" : "Arn"
            }
        }
    /]
[/#list]

[#function formatDependentWAFConditionId type resourceId extensions...]
    [#local matchSetResourceType = (getWAFConditionSetMappings(type)["ResourceType"]["hamlet"])!"" ]
    [#return
        formatDependentResourceId(
            matchSetResourceType?has_content?then(
                matchSetResourceType,
                "HamletFatal: NoMatch found for SetMapping ${type}:"
            ),
            resourceId,
            extensions
        )
    ]
[/#function]

[#function formatDependentWAFRuleId resourceId extensions...]
    [#return formatDependentResourceId(
            AWS_WAFV2_RULE_RESOURCE_TYPE,
            resourceId,
            extensions)]
[/#function]

[#function formatDependentWAFAclId resourceId extensions...]
    [#return formatDependentResourceId(
            AWS_WAFV2_ACL_RESOURCE_TYPE
            resourceId,
            extensions)]
[/#function]

[#function formatDependentWAFAclAssociationId resourceId extensions...]
    [#return formatDependentResourceId(
        AWS_WAFV2_ACL_ASSOCIATION_RESOURCE_TYPE
        resourceId,
        extensions
    )]
[/#function]
